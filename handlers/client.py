import smtplib
from email.mime.text import MIMEText

from aiogram import types
from aiogram.dispatcher import FSMContext

from db_api import db_quick_commands as db_commands
from db_api.schemas.users import Users_model as users
from config import dp, bot, _
import keyboards as kb
import handlers.states as states
import callback.quick_callback


#######################################################################################################################################
from language_middleware import get_lang
from settings import session


async def anti_flood(*args, **kwargs):
    m = args[0]
    await m.answer(_("–ù–µ —Ñ–ª—É–¥–∏ :) –û–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Å–µ–∫—É–Ω–¥—É"))

#######################################################################################################################################




#######################################################################################################################################

@dp.message_handler(commands=["start"])
@dp.throttled(anti_flood, rate=1)
async def start_handler(message: types.Message):
    if message.chat.type == 'private':
        try:
            if (not await db_commands.select_user(message.from_user.id)):
                db_commands.register_user(message)
                await message.answer(_('üîù <b>–ì–æ–ª–æ–≤–Ω–µ –ú–µ–Ω—é</b>'), parse_mode='html', reply_markup=kb.markup_start)
                await message.answer(_('ü§î –û–±–µ—Ä—ñ—Ç—å –≤–∞—à –≤–∞—Ä—ñ–∞–Ω—Ç üí≠'))
            else:
                await message.answer(_('üîù <b>–ì–æ–ª–æ–≤–Ω–µ –ú–µ–Ω—é</b>'), parse_mode='html', reply_markup=kb.markup_start)
                await message.answer(_('ü§î –û–±–µ—Ä—ñ—Ç—å –≤–∞—à –≤–∞—Ä—ñ–∞–Ω—Ç üí≠'))
        except:
            await message.answer(_('‚ùó –ë–æ—Ç —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –æ—Å–æ–±–∏—Å—Ç–æ, –Ω–µ –º–æ–∂–Ω–∞ –π–æ–≥–æ –¥–æ–±–∞–≤–ª—è—Ç–∏ –≤ –≥—Ä—É–ø–∏. –ü–æ—Å–ø—ñ–ª–∫—É–π—Ç–µ—Å—å –∑ –Ω–∏–º —Å–∞–º—ñ: @trx_games_bot\n–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ —ñ–Ω—à—ñ –ø—Ä–æ–±–ª–µ–º–∏, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: @Christooo1'))
    else:
        await message.answer(_('‚ùó –ë–æ—Ç —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –æ—Å–æ–±–∏—Å—Ç–æ, –Ω–µ –º–æ–∂–Ω–∞ –π–æ–≥–æ –¥–æ–±–∞–≤–ª—è—Ç–∏ –≤ –≥—Ä—É–ø–∏. –ü–æ—Å–ø—ñ–ª–∫—É–π—Ç–µ—Å—å –∑ –Ω–∏–º —Å–∞–º—ñ: @trx_games_bot\n–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ —ñ–Ω—à—ñ –ø—Ä–æ–±–ª–µ–º–∏, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: @Christooo1'))

#######################################################################################################################################



#######################################################################################################################################

@dp.message_handler(content_types=['text'])
@dp.throttled(anti_flood, rate=1)
async def text_message(message: types.Message):
    ban_mod = await users.query.where(users.user_id == message.from_user.id).gino.first()
    ban = ban_mod.ban
    if ban == 0:
        if (message.text == "üÜò –¢–µ—Ö. –ü—ñ–¥—Ç—Ä–∏–º–∫–∞") or (message.text == "üÜò –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞") or (message.text == "üÜò Support"):
            markup = types.InlineKeyboardMarkup(row_width=1)
            change_language = types.InlineKeyboardButton('üîÑ \n\n–ü–æ–º—ñ–Ω—è—Ç–∏ –º–æ–≤—É | –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ | Change the language', callback_data="change_language")
            up_button = types.InlineKeyboardButton("üì∫ –ó–≤'—è–∑–∞—Ç–∏—Å—å —ñ–∑ —Ç–µ—Ö. –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é", url="https://t.me/Ch")
            markup.add(change_language, up_button)
            photo = open('img/what-is-bot-management.png', 'rb')
            await bot.send_photo(message.from_user.id, photo, caption='–ü—Ä–∏ –±—É–¥—å-—è–∫–∏—Ö –ø–∏—Ç–∞–Ω–Ω—è—Ö –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ', reply_markup=markup, parse_mode='html')

#######################################################################################################################################


